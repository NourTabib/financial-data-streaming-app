/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package app.nourtabib.financialdatastreamingapp.avros;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ShortTimeFourierResult extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7203834878035933667L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ShortTimeFourierResult\",\"namespace\":\"app.nourtabib.financialdatastreamingapp.avros\",\"fields\":[{\"name\":\"timeAxis\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"frequencyAxis\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"outputFFTFreqs\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\"}}},{\"name\":\"outputMagnitudes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\"}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ShortTimeFourierResult> ENCODER =
      new BinaryMessageEncoder<ShortTimeFourierResult>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ShortTimeFourierResult> DECODER =
      new BinaryMessageDecoder<ShortTimeFourierResult>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ShortTimeFourierResult> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ShortTimeFourierResult> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ShortTimeFourierResult> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ShortTimeFourierResult>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ShortTimeFourierResult to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ShortTimeFourierResult from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ShortTimeFourierResult instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ShortTimeFourierResult fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.util.List<java.lang.Double> timeAxis;
  @Deprecated public java.util.List<java.lang.Double> frequencyAxis;
  @Deprecated public java.util.List<java.util.List<java.lang.Double>> outputFFTFreqs;
  @Deprecated public java.util.List<java.util.List<java.lang.Double>> outputMagnitudes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ShortTimeFourierResult() {}

  /**
   * All-args constructor.
   * @param timeAxis The new value for timeAxis
   * @param frequencyAxis The new value for frequencyAxis
   * @param outputFFTFreqs The new value for outputFFTFreqs
   * @param outputMagnitudes The new value for outputMagnitudes
   */
  public ShortTimeFourierResult(java.util.List<java.lang.Double> timeAxis, java.util.List<java.lang.Double> frequencyAxis, java.util.List<java.util.List<java.lang.Double>> outputFFTFreqs, java.util.List<java.util.List<java.lang.Double>> outputMagnitudes) {
    this.timeAxis = timeAxis;
    this.frequencyAxis = frequencyAxis;
    this.outputFFTFreqs = outputFFTFreqs;
    this.outputMagnitudes = outputMagnitudes;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timeAxis;
    case 1: return frequencyAxis;
    case 2: return outputFFTFreqs;
    case 3: return outputMagnitudes;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timeAxis = (java.util.List<java.lang.Double>)value$; break;
    case 1: frequencyAxis = (java.util.List<java.lang.Double>)value$; break;
    case 2: outputFFTFreqs = (java.util.List<java.util.List<java.lang.Double>>)value$; break;
    case 3: outputMagnitudes = (java.util.List<java.util.List<java.lang.Double>>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timeAxis' field.
   * @return The value of the 'timeAxis' field.
   */
  public java.util.List<java.lang.Double> getTimeAxis() {
    return timeAxis;
  }


  /**
   * Sets the value of the 'timeAxis' field.
   * @param value the value to set.
   */
  public void setTimeAxis(java.util.List<java.lang.Double> value) {
    this.timeAxis = value;
  }

  /**
   * Gets the value of the 'frequencyAxis' field.
   * @return The value of the 'frequencyAxis' field.
   */
  public java.util.List<java.lang.Double> getFrequencyAxis() {
    return frequencyAxis;
  }


  /**
   * Sets the value of the 'frequencyAxis' field.
   * @param value the value to set.
   */
  public void setFrequencyAxis(java.util.List<java.lang.Double> value) {
    this.frequencyAxis = value;
  }

  /**
   * Gets the value of the 'outputFFTFreqs' field.
   * @return The value of the 'outputFFTFreqs' field.
   */
  public java.util.List<java.util.List<java.lang.Double>> getOutputFFTFreqs() {
    return outputFFTFreqs;
  }


  /**
   * Sets the value of the 'outputFFTFreqs' field.
   * @param value the value to set.
   */
  public void setOutputFFTFreqs(java.util.List<java.util.List<java.lang.Double>> value) {
    this.outputFFTFreqs = value;
  }

  /**
   * Gets the value of the 'outputMagnitudes' field.
   * @return The value of the 'outputMagnitudes' field.
   */
  public java.util.List<java.util.List<java.lang.Double>> getOutputMagnitudes() {
    return outputMagnitudes;
  }


  /**
   * Sets the value of the 'outputMagnitudes' field.
   * @param value the value to set.
   */
  public void setOutputMagnitudes(java.util.List<java.util.List<java.lang.Double>> value) {
    this.outputMagnitudes = value;
  }

  /**
   * Creates a new ShortTimeFourierResult RecordBuilder.
   * @return A new ShortTimeFourierResult RecordBuilder
   */
  public static app.nourtabib.financialdatastreamingapp.avros.ShortTimeFourierResult.Builder newBuilder() {
    return new app.nourtabib.financialdatastreamingapp.avros.ShortTimeFourierResult.Builder();
  }

  /**
   * Creates a new ShortTimeFourierResult RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ShortTimeFourierResult RecordBuilder
   */
  public static app.nourtabib.financialdatastreamingapp.avros.ShortTimeFourierResult.Builder newBuilder(app.nourtabib.financialdatastreamingapp.avros.ShortTimeFourierResult.Builder other) {
    if (other == null) {
      return new app.nourtabib.financialdatastreamingapp.avros.ShortTimeFourierResult.Builder();
    } else {
      return new app.nourtabib.financialdatastreamingapp.avros.ShortTimeFourierResult.Builder(other);
    }
  }

  /**
   * Creates a new ShortTimeFourierResult RecordBuilder by copying an existing ShortTimeFourierResult instance.
   * @param other The existing instance to copy.
   * @return A new ShortTimeFourierResult RecordBuilder
   */
  public static app.nourtabib.financialdatastreamingapp.avros.ShortTimeFourierResult.Builder newBuilder(app.nourtabib.financialdatastreamingapp.avros.ShortTimeFourierResult other) {
    if (other == null) {
      return new app.nourtabib.financialdatastreamingapp.avros.ShortTimeFourierResult.Builder();
    } else {
      return new app.nourtabib.financialdatastreamingapp.avros.ShortTimeFourierResult.Builder(other);
    }
  }

  /**
   * RecordBuilder for ShortTimeFourierResult instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ShortTimeFourierResult>
    implements org.apache.avro.data.RecordBuilder<ShortTimeFourierResult> {

    private java.util.List<java.lang.Double> timeAxis;
    private java.util.List<java.lang.Double> frequencyAxis;
    private java.util.List<java.util.List<java.lang.Double>> outputFFTFreqs;
    private java.util.List<java.util.List<java.lang.Double>> outputMagnitudes;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(app.nourtabib.financialdatastreamingapp.avros.ShortTimeFourierResult.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timeAxis)) {
        this.timeAxis = data().deepCopy(fields()[0].schema(), other.timeAxis);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.frequencyAxis)) {
        this.frequencyAxis = data().deepCopy(fields()[1].schema(), other.frequencyAxis);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.outputFFTFreqs)) {
        this.outputFFTFreqs = data().deepCopy(fields()[2].schema(), other.outputFFTFreqs);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.outputMagnitudes)) {
        this.outputMagnitudes = data().deepCopy(fields()[3].schema(), other.outputMagnitudes);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing ShortTimeFourierResult instance
     * @param other The existing instance to copy.
     */
    private Builder(app.nourtabib.financialdatastreamingapp.avros.ShortTimeFourierResult other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.timeAxis)) {
        this.timeAxis = data().deepCopy(fields()[0].schema(), other.timeAxis);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.frequencyAxis)) {
        this.frequencyAxis = data().deepCopy(fields()[1].schema(), other.frequencyAxis);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.outputFFTFreqs)) {
        this.outputFFTFreqs = data().deepCopy(fields()[2].schema(), other.outputFFTFreqs);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.outputMagnitudes)) {
        this.outputMagnitudes = data().deepCopy(fields()[3].schema(), other.outputMagnitudes);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'timeAxis' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getTimeAxis() {
      return timeAxis;
    }


    /**
      * Sets the value of the 'timeAxis' field.
      * @param value The value of 'timeAxis'.
      * @return This builder.
      */
    public app.nourtabib.financialdatastreamingapp.avros.ShortTimeFourierResult.Builder setTimeAxis(java.util.List<java.lang.Double> value) {
      validate(fields()[0], value);
      this.timeAxis = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timeAxis' field has been set.
      * @return True if the 'timeAxis' field has been set, false otherwise.
      */
    public boolean hasTimeAxis() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timeAxis' field.
      * @return This builder.
      */
    public app.nourtabib.financialdatastreamingapp.avros.ShortTimeFourierResult.Builder clearTimeAxis() {
      timeAxis = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'frequencyAxis' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getFrequencyAxis() {
      return frequencyAxis;
    }


    /**
      * Sets the value of the 'frequencyAxis' field.
      * @param value The value of 'frequencyAxis'.
      * @return This builder.
      */
    public app.nourtabib.financialdatastreamingapp.avros.ShortTimeFourierResult.Builder setFrequencyAxis(java.util.List<java.lang.Double> value) {
      validate(fields()[1], value);
      this.frequencyAxis = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'frequencyAxis' field has been set.
      * @return True if the 'frequencyAxis' field has been set, false otherwise.
      */
    public boolean hasFrequencyAxis() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'frequencyAxis' field.
      * @return This builder.
      */
    public app.nourtabib.financialdatastreamingapp.avros.ShortTimeFourierResult.Builder clearFrequencyAxis() {
      frequencyAxis = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'outputFFTFreqs' field.
      * @return The value.
      */
    public java.util.List<java.util.List<java.lang.Double>> getOutputFFTFreqs() {
      return outputFFTFreqs;
    }


    /**
      * Sets the value of the 'outputFFTFreqs' field.
      * @param value The value of 'outputFFTFreqs'.
      * @return This builder.
      */
    public app.nourtabib.financialdatastreamingapp.avros.ShortTimeFourierResult.Builder setOutputFFTFreqs(java.util.List<java.util.List<java.lang.Double>> value) {
      validate(fields()[2], value);
      this.outputFFTFreqs = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'outputFFTFreqs' field has been set.
      * @return True if the 'outputFFTFreqs' field has been set, false otherwise.
      */
    public boolean hasOutputFFTFreqs() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'outputFFTFreqs' field.
      * @return This builder.
      */
    public app.nourtabib.financialdatastreamingapp.avros.ShortTimeFourierResult.Builder clearOutputFFTFreqs() {
      outputFFTFreqs = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'outputMagnitudes' field.
      * @return The value.
      */
    public java.util.List<java.util.List<java.lang.Double>> getOutputMagnitudes() {
      return outputMagnitudes;
    }


    /**
      * Sets the value of the 'outputMagnitudes' field.
      * @param value The value of 'outputMagnitudes'.
      * @return This builder.
      */
    public app.nourtabib.financialdatastreamingapp.avros.ShortTimeFourierResult.Builder setOutputMagnitudes(java.util.List<java.util.List<java.lang.Double>> value) {
      validate(fields()[3], value);
      this.outputMagnitudes = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'outputMagnitudes' field has been set.
      * @return True if the 'outputMagnitudes' field has been set, false otherwise.
      */
    public boolean hasOutputMagnitudes() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'outputMagnitudes' field.
      * @return This builder.
      */
    public app.nourtabib.financialdatastreamingapp.avros.ShortTimeFourierResult.Builder clearOutputMagnitudes() {
      outputMagnitudes = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ShortTimeFourierResult build() {
      try {
        ShortTimeFourierResult record = new ShortTimeFourierResult();
        record.timeAxis = fieldSetFlags()[0] ? this.timeAxis : (java.util.List<java.lang.Double>) defaultValue(fields()[0]);
        record.frequencyAxis = fieldSetFlags()[1] ? this.frequencyAxis : (java.util.List<java.lang.Double>) defaultValue(fields()[1]);
        record.outputFFTFreqs = fieldSetFlags()[2] ? this.outputFFTFreqs : (java.util.List<java.util.List<java.lang.Double>>) defaultValue(fields()[2]);
        record.outputMagnitudes = fieldSetFlags()[3] ? this.outputMagnitudes : (java.util.List<java.util.List<java.lang.Double>>) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ShortTimeFourierResult>
    WRITER$ = (org.apache.avro.io.DatumWriter<ShortTimeFourierResult>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ShortTimeFourierResult>
    READER$ = (org.apache.avro.io.DatumReader<ShortTimeFourierResult>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    long size0 = this.timeAxis.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.Double e0: this.timeAxis) {
      actualSize0++;
      out.startItem();
      out.writeDouble(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.frequencyAxis.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.lang.Double e1: this.frequencyAxis) {
      actualSize1++;
      out.startItem();
      out.writeDouble(e1);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    long size2 = this.outputFFTFreqs.size();
    out.writeArrayStart();
    out.setItemCount(size2);
    long actualSize2 = 0;
    for (java.util.List<java.lang.Double> e2: this.outputFFTFreqs) {
      actualSize2++;
      out.startItem();
      long size3 = e2.size();
      out.writeArrayStart();
      out.setItemCount(size3);
      long actualSize3 = 0;
      for (java.lang.Double e3: e2) {
        actualSize3++;
        out.startItem();
        out.writeDouble(e3);
      }
      out.writeArrayEnd();
      if (actualSize3 != size3)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");
    }
    out.writeArrayEnd();
    if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");

    long size4 = this.outputMagnitudes.size();
    out.writeArrayStart();
    out.setItemCount(size4);
    long actualSize4 = 0;
    for (java.util.List<java.lang.Double> e4: this.outputMagnitudes) {
      actualSize4++;
      out.startItem();
      long size5 = e4.size();
      out.writeArrayStart();
      out.setItemCount(size5);
      long actualSize5 = 0;
      for (java.lang.Double e5: e4) {
        actualSize5++;
        out.startItem();
        out.writeDouble(e5);
      }
      out.writeArrayEnd();
      if (actualSize5 != size5)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size5 + ", but element count was " + actualSize5 + ".");
    }
    out.writeArrayEnd();
    if (actualSize4 != size4)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size4 + ", but element count was " + actualSize4 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readArrayStart();
      java.util.List<java.lang.Double> a0 = this.timeAxis;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.Double>((int)size0, SCHEMA$.getField("timeAxis").schema());
        this.timeAxis = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.Double> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.Double e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readDouble();
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<java.lang.Double> a1 = this.frequencyAxis;
      if (a1 == null) {
        a1 = new SpecificData.Array<java.lang.Double>((int)size1, SCHEMA$.getField("frequencyAxis").schema());
        this.frequencyAxis = a1;
      } else a1.clear();
      SpecificData.Array<java.lang.Double> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.Double e1 = (ga1 != null ? ga1.peek() : null);
          e1 = in.readDouble();
          a1.add(e1);
        }
      }

      long size2 = in.readArrayStart();
      java.util.List<java.util.List<java.lang.Double>> a2 = this.outputFFTFreqs;
      if (a2 == null) {
        a2 = new SpecificData.Array<java.util.List<java.lang.Double>>((int)size2, SCHEMA$.getField("outputFFTFreqs").schema());
        this.outputFFTFreqs = a2;
      } else a2.clear();
      SpecificData.Array<java.util.List<java.lang.Double>> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.util.List<java.lang.Double>>)a2 : null);
      for ( ; 0 < size2; size2 = in.arrayNext()) {
        for ( ; size2 != 0; size2--) {
          java.util.List<java.lang.Double> e2 = (ga2 != null ? ga2.peek() : null);
          long size3 = in.readArrayStart();
          java.util.List<java.lang.Double> a3 = e2;
          if (a3 == null) {
            a3 = new SpecificData.Array<java.lang.Double>((int)size3, SCHEMA$.getField("outputFFTFreqs").schema().getElementType());
            e2 = a3;
          } else a3.clear();
          SpecificData.Array<java.lang.Double> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a3 : null);
          for ( ; 0 < size3; size3 = in.arrayNext()) {
            for ( ; size3 != 0; size3--) {
              java.lang.Double e3 = (ga3 != null ? ga3.peek() : null);
              e3 = in.readDouble();
              a3.add(e3);
            }
          }
          a2.add(e2);
        }
      }

      long size4 = in.readArrayStart();
      java.util.List<java.util.List<java.lang.Double>> a4 = this.outputMagnitudes;
      if (a4 == null) {
        a4 = new SpecificData.Array<java.util.List<java.lang.Double>>((int)size4, SCHEMA$.getField("outputMagnitudes").schema());
        this.outputMagnitudes = a4;
      } else a4.clear();
      SpecificData.Array<java.util.List<java.lang.Double>> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.util.List<java.lang.Double>>)a4 : null);
      for ( ; 0 < size4; size4 = in.arrayNext()) {
        for ( ; size4 != 0; size4--) {
          java.util.List<java.lang.Double> e4 = (ga4 != null ? ga4.peek() : null);
          long size5 = in.readArrayStart();
          java.util.List<java.lang.Double> a5 = e4;
          if (a5 == null) {
            a5 = new SpecificData.Array<java.lang.Double>((int)size5, SCHEMA$.getField("outputMagnitudes").schema().getElementType());
            e4 = a5;
          } else a5.clear();
          SpecificData.Array<java.lang.Double> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a5 : null);
          for ( ; 0 < size5; size5 = in.arrayNext()) {
            for ( ; size5 != 0; size5--) {
              java.lang.Double e5 = (ga5 != null ? ga5.peek() : null);
              e5 = in.readDouble();
              a5.add(e5);
            }
          }
          a4.add(e4);
        }
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.Double> a0 = this.timeAxis;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.Double>((int)size0, SCHEMA$.getField("timeAxis").schema());
            this.timeAxis = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.Double> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.Double e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readDouble();
              a0.add(e0);
            }
          }
          break;

        case 1:
          long size1 = in.readArrayStart();
          java.util.List<java.lang.Double> a1 = this.frequencyAxis;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.lang.Double>((int)size1, SCHEMA$.getField("frequencyAxis").schema());
            this.frequencyAxis = a1;
          } else a1.clear();
          SpecificData.Array<java.lang.Double> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.Double e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readDouble();
              a1.add(e1);
            }
          }
          break;

        case 2:
          long size2 = in.readArrayStart();
          java.util.List<java.util.List<java.lang.Double>> a2 = this.outputFFTFreqs;
          if (a2 == null) {
            a2 = new SpecificData.Array<java.util.List<java.lang.Double>>((int)size2, SCHEMA$.getField("outputFFTFreqs").schema());
            this.outputFFTFreqs = a2;
          } else a2.clear();
          SpecificData.Array<java.util.List<java.lang.Double>> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.util.List<java.lang.Double>>)a2 : null);
          for ( ; 0 < size2; size2 = in.arrayNext()) {
            for ( ; size2 != 0; size2--) {
              java.util.List<java.lang.Double> e2 = (ga2 != null ? ga2.peek() : null);
              long size3 = in.readArrayStart();
              java.util.List<java.lang.Double> a3 = e2;
              if (a3 == null) {
                a3 = new SpecificData.Array<java.lang.Double>((int)size3, SCHEMA$.getField("outputFFTFreqs").schema().getElementType());
                e2 = a3;
              } else a3.clear();
              SpecificData.Array<java.lang.Double> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a3 : null);
              for ( ; 0 < size3; size3 = in.arrayNext()) {
                for ( ; size3 != 0; size3--) {
                  java.lang.Double e3 = (ga3 != null ? ga3.peek() : null);
                  e3 = in.readDouble();
                  a3.add(e3);
                }
              }
              a2.add(e2);
            }
          }
          break;

        case 3:
          long size4 = in.readArrayStart();
          java.util.List<java.util.List<java.lang.Double>> a4 = this.outputMagnitudes;
          if (a4 == null) {
            a4 = new SpecificData.Array<java.util.List<java.lang.Double>>((int)size4, SCHEMA$.getField("outputMagnitudes").schema());
            this.outputMagnitudes = a4;
          } else a4.clear();
          SpecificData.Array<java.util.List<java.lang.Double>> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.util.List<java.lang.Double>>)a4 : null);
          for ( ; 0 < size4; size4 = in.arrayNext()) {
            for ( ; size4 != 0; size4--) {
              java.util.List<java.lang.Double> e4 = (ga4 != null ? ga4.peek() : null);
              long size5 = in.readArrayStart();
              java.util.List<java.lang.Double> a5 = e4;
              if (a5 == null) {
                a5 = new SpecificData.Array<java.lang.Double>((int)size5, SCHEMA$.getField("outputMagnitudes").schema().getElementType());
                e4 = a5;
              } else a5.clear();
              SpecificData.Array<java.lang.Double> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a5 : null);
              for ( ; 0 < size5; size5 = in.arrayNext()) {
                for ( ; size5 != 0; size5--) {
                  java.lang.Double e5 = (ga5 != null ? ga5.peek() : null);
                  e5 = in.readDouble();
                  a5.add(e5);
                }
              }
              a4.add(e4);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










