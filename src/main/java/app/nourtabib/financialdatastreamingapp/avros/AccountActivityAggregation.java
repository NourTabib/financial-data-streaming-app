/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package app.nourtabib.financialdatastreamingapp.avros;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AccountActivityAggregation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2135050769894531628L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AccountActivityAggregation\",\"namespace\":\"app.nourtabib.financialdatastreamingapp.avros\",\"fields\":[{\"name\":\"total\",\"type\":\"double\"},{\"name\":\"count\",\"type\":\"int\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<AccountActivityAggregation> ENCODER =
      new BinaryMessageEncoder<AccountActivityAggregation>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AccountActivityAggregation> DECODER =
      new BinaryMessageDecoder<AccountActivityAggregation>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AccountActivityAggregation> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AccountActivityAggregation> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AccountActivityAggregation> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AccountActivityAggregation>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AccountActivityAggregation to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AccountActivityAggregation from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AccountActivityAggregation instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AccountActivityAggregation fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public double total;
  @Deprecated public int count;
  @Deprecated public java.time.Instant timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AccountActivityAggregation() {}

  /**
   * All-args constructor.
   * @param total The new value for total
   * @param count The new value for count
   * @param timestamp The new value for timestamp
   */
  public AccountActivityAggregation(java.lang.Double total, java.lang.Integer count, java.time.Instant timestamp) {
    this.total = total;
    this.count = count;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return total;
    case 1: return count;
    case 2: return timestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: total = (java.lang.Double)value$; break;
    case 1: count = (java.lang.Integer)value$; break;
    case 2: timestamp = (java.time.Instant)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'total' field.
   * @return The value of the 'total' field.
   */
  public double getTotal() {
    return total;
  }


  /**
   * Sets the value of the 'total' field.
   * @param value the value to set.
   */
  public void setTotal(double value) {
    this.total = value;
  }

  /**
   * Gets the value of the 'count' field.
   * @return The value of the 'count' field.
   */
  public int getCount() {
    return count;
  }


  /**
   * Sets the value of the 'count' field.
   * @param value the value to set.
   */
  public void setCount(int value) {
    this.count = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new AccountActivityAggregation RecordBuilder.
   * @return A new AccountActivityAggregation RecordBuilder
   */
  public static app.nourtabib.financialdatastreamingapp.avros.AccountActivityAggregation.Builder newBuilder() {
    return new app.nourtabib.financialdatastreamingapp.avros.AccountActivityAggregation.Builder();
  }

  /**
   * Creates a new AccountActivityAggregation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AccountActivityAggregation RecordBuilder
   */
  public static app.nourtabib.financialdatastreamingapp.avros.AccountActivityAggregation.Builder newBuilder(app.nourtabib.financialdatastreamingapp.avros.AccountActivityAggregation.Builder other) {
    if (other == null) {
      return new app.nourtabib.financialdatastreamingapp.avros.AccountActivityAggregation.Builder();
    } else {
      return new app.nourtabib.financialdatastreamingapp.avros.AccountActivityAggregation.Builder(other);
    }
  }

  /**
   * Creates a new AccountActivityAggregation RecordBuilder by copying an existing AccountActivityAggregation instance.
   * @param other The existing instance to copy.
   * @return A new AccountActivityAggregation RecordBuilder
   */
  public static app.nourtabib.financialdatastreamingapp.avros.AccountActivityAggregation.Builder newBuilder(app.nourtabib.financialdatastreamingapp.avros.AccountActivityAggregation other) {
    if (other == null) {
      return new app.nourtabib.financialdatastreamingapp.avros.AccountActivityAggregation.Builder();
    } else {
      return new app.nourtabib.financialdatastreamingapp.avros.AccountActivityAggregation.Builder(other);
    }
  }

  /**
   * RecordBuilder for AccountActivityAggregation instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AccountActivityAggregation>
    implements org.apache.avro.data.RecordBuilder<AccountActivityAggregation> {

    private double total;
    private int count;
    private java.time.Instant timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(app.nourtabib.financialdatastreamingapp.avros.AccountActivityAggregation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.total)) {
        this.total = data().deepCopy(fields()[0].schema(), other.total);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.count)) {
        this.count = data().deepCopy(fields()[1].schema(), other.count);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing AccountActivityAggregation instance
     * @param other The existing instance to copy.
     */
    private Builder(app.nourtabib.financialdatastreamingapp.avros.AccountActivityAggregation other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.total)) {
        this.total = data().deepCopy(fields()[0].schema(), other.total);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.count)) {
        this.count = data().deepCopy(fields()[1].schema(), other.count);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'total' field.
      * @return The value.
      */
    public double getTotal() {
      return total;
    }


    /**
      * Sets the value of the 'total' field.
      * @param value The value of 'total'.
      * @return This builder.
      */
    public app.nourtabib.financialdatastreamingapp.avros.AccountActivityAggregation.Builder setTotal(double value) {
      validate(fields()[0], value);
      this.total = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'total' field has been set.
      * @return True if the 'total' field has been set, false otherwise.
      */
    public boolean hasTotal() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'total' field.
      * @return This builder.
      */
    public app.nourtabib.financialdatastreamingapp.avros.AccountActivityAggregation.Builder clearTotal() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'count' field.
      * @return The value.
      */
    public int getCount() {
      return count;
    }


    /**
      * Sets the value of the 'count' field.
      * @param value The value of 'count'.
      * @return This builder.
      */
    public app.nourtabib.financialdatastreamingapp.avros.AccountActivityAggregation.Builder setCount(int value) {
      validate(fields()[1], value);
      this.count = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'count' field has been set.
      * @return True if the 'count' field has been set, false otherwise.
      */
    public boolean hasCount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'count' field.
      * @return This builder.
      */
    public app.nourtabib.financialdatastreamingapp.avros.AccountActivityAggregation.Builder clearCount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public app.nourtabib.financialdatastreamingapp.avros.AccountActivityAggregation.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[2], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public app.nourtabib.financialdatastreamingapp.avros.AccountActivityAggregation.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AccountActivityAggregation build() {
      try {
        AccountActivityAggregation record = new AccountActivityAggregation();
        record.total = fieldSetFlags()[0] ? this.total : (java.lang.Double) defaultValue(fields()[0]);
        record.count = fieldSetFlags()[1] ? this.count : (java.lang.Integer) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.time.Instant) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AccountActivityAggregation>
    WRITER$ = (org.apache.avro.io.DatumWriter<AccountActivityAggregation>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AccountActivityAggregation>
    READER$ = (org.apache.avro.io.DatumReader<AccountActivityAggregation>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










